class Krushkal{

#define MAX 1000

public:
int n,k;              // n--> no of nodes   k--> no of edges

int id[MAX];
int size[MAX];
vector<pair<int,pair<int,int> > >g;
  
int root(int i)
{
    
           while(id[i]!=i)
           {
                id[i]=id[id[i]];          
                i=id[i];
           }
    
           return i;
}
 
void init(int n)
{
               for(int i=0;i<=n;i++)
               {
                         size[i]=1;        
                         id[i]=i;
               }   
               
               return;  
}

void union1(int a,int b)
{
     int p=root(a);
     int q=root(b);
     
     if(size[p]>size[q])
     {
               size[p]=+size[q];         
               id[q]=p;
     }
     else
     {
                size[q]=+size[p];         
                id[p]=q;
     }
}

set<pair<int,int> >s;                       // set of the edges in tree made

int krushkal(int n,int k)                  //  returns cost of spanning
{
    init(n);
    int cost=0;
    sort(g.begin(),g.end());
    
    for(int i=0;i<g.size();i++)
    {
          int u=g[i].second.first;
          int v=g[i].second.second;
            
         if(root(u)!=root(v))
         {
                 union1(u,v);
                 s.insert(make_pair(u,v));
                 cost+=g[i].first;          
         }
    }
    
    return cost;
}

void print()
{
    set<pair<int,int> >::iterator it;
    
    for(it= s.begin();it!=s.end();it++)
    {
         cout<<(*it).first<<" "<<it->second<<endl;
    }
}

void input(int n)
{
     int a,b,c;
     pair<int,pair<int,int> >p;
      
     while(n--)
     {
           cin>>a>>b>>c;
           p.first=c;
           p.second.first=a;
           p.second.second=b;
           g.push_back(p);
     }
     
     return;
} 

};
