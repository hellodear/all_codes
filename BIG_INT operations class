class BIGINT
{
      public:
              
      #define MAX 1000000

    char* multiply(string a,string b){
    
    static char mul[MAX];
   
    char c[MAX];
    char temp[MAX];
    int la,lb;
    int i,j,k=0,x=0,y;
    long int r=0;
    long sum = 0;
    la=a.size()-1;
    lb=b.size()-1;
   
  
        for(i=0;i<=la;i++){
                a[i] = a[i] - 48;
        }

        for(i=0;i<=lb;i++){
                b[i] = b[i] - 48;
        }


    for(i=lb;i>=0;i--){
         r=0;
         for(j=la;j>=0;j--){
             temp[k++] = (b[i]*a[j] + r)%10;
             r = (b[i]*a[j]+r)/10;
         }
         temp[k++] = r;
         x++;
         for(y = 0;y<x;y++){
             temp[k++] = 0;
         }
    }
   
    k=0;
    r=0;
    for(i=0;i<la+lb+2;i++){
         sum =0;
         y=0;
         for(j=1;j<=lb+1;j++){
             if(i <= la+j){
                 sum = sum + temp[y+i];
             }
             y += j + la + 1;
         }
         c[k++] = (sum+r) %10;
         r = (sum+r)/10;
    }
    c[k] = r;
    j=0;
    for(i=k-1;i>=0;i--){
         mul[j++]=c[i] + 48;
    }
    mul[j]='\0';
    
    return mul;
    };                                         /// multiplication function returns a char pointer, not string here

//////////////////////////////////////////// ADD function now
    
string add (string &s1, string &s2){
int carry=0,sum,i;

string  min=s1,
 max=s2,
 result = "";

// Finds the bigger string
if (s1.length()>s2.length()){
 max = s1;
 min = s2;
} else {
 max = s2;
 min = s1;
}

// Fills the result for overlapping regions of sum
for (i = min.length()-1; i>=0; i--){
 sum = min[i] + max[i + max.length() - min.length()] + carry - 2*'0';

 carry = sum/10;
 sum %=10;

 result = (char)(sum + '0') + result;
}

// Summates the previous carry and the remaining digits of bigger string
i = max.length() - min.length()-1;

while (i>=0){
 sum = max[i] + carry - '0';
 carry = sum/10;
 sum%=10;

 result = (char)(sum + '0') + result;
 i--;
}

// Adds the carry if remaining to the last digit e.g 999+1=1000
if (carry!=0){
 result = (char)(carry + '0') + result;
}

return result;
}

    
    
};
